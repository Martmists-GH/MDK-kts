plugins {
    java
    eclipse
    idea
    `maven-publish`
    id("net.neoforged.gradle.userdev") version "7.0.133"
}

// Properties from gradle.properties
val minecraft_version: String by project
val minecraft_version_range: String by project
val neo_version: String by project
val neo_version_range: String by project
val loader_version_range: String by project
val mod_id: String by project
val mod_name: String by project
val mod_license: String by project
val mod_version: String by project
val mod_group_id: String by project
val mod_authors: String by project
val mod_description: String by project

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java {
    toolchain {
        // Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// minecraft {
    // accessTransformers.file(rootProject.file("src/main/resources/META-INF/accesstransformer.cfg"))
    // accessTransformers.entry("public", "net.minecraft.client.Minecraft", "textureManager", "#", "textureManager")
// }


// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty("forge.logging.markers", "REGISTRIES")

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty("forge.logging.console.level", "debug")

        val main by sourceSets.getting
        modSource(main)
    }

    // KTS NOTE: It could be considered to add Kotlin DSL for these 4 in the NF gradle plugin.
    //           That way, you could use `client { ... }` etc, and it should only be a few lines of code.
    val client by creating {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty("forge.enabledGameTestNamespaces", mod_id)
    }

    val server by creating {
        systemProperty("forge.enabledGameTestNamespaces", mod_id)
        programArgument("--nogui")
    }

    val gameTestServer by creating {
        systemProperty("forge.enabledGameTestNamespaces", mod_id)
    }

    val data by creating {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory = project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll(
            "--mod", mod_id,
            "--all",
            "--output", file("src/generated/resources/").absolutePath,
            "--existing", file("src/main/resources/").absolutePath
        )
    }
}

// Include resources generated by data generators.
sourceSets {
    named("main") {
        resources.srcDir("build/generated/resources")
    }
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
val localRuntime by configurations.existing {
    val runtimeClasspath by configurations.getting
    runtimeClasspath.extendsFrom(this)
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation("net.neoforged:neoforge:$neo_version")

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    // compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}")
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation("blank:coolmod-${mc_version}:${coolmod_version}")

    // Example mod dependency using a file as dependency
    // implementation(files("libs/coolmod-${mc_version}-${coolmod_version}.jar"))

    // Example project dependency using a sister or child project:
    // implementation(project(":myproject"))

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

tasks {
    // This block of code expands all declared replace properties in the specified resource targets.
    // A missing property will result in an error. Properties are expanded using ${} Groovy notation.
    // When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    withType<ProcessResources> {
        val replaceProperties = mapOf(
            "minecraft_version" to minecraft_version,
            "minecraft_version_range" to minecraft_version_range,
            "neo_version" to neo_version,
            "neo_version_range" to neo_version_range,
            "loader_version_range" to loader_version_range,
            "mod_id" to mod_id,
            "mod_name" to mod_name,
            "mod_license" to mod_license,
            "mod_version" to mod_version,
            "mod_authors" to mod_authors,
            "mod_description" to mod_description
        )
        inputs.properties(replaceProperties)

        filesMatching("META-INF/neoforge.mods.toml") {
            expand(replaceProperties)
        }
    }

    withType<JavaCompile> {
        options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        val mavenJava by registering(MavenPublication::class) {
            from(components["java"])
        }
    }
    repositories {
        maven("file://${project.projectDir}/repo")
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}
